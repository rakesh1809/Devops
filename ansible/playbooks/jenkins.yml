---

- hosts: localhost
  vars_files:
    - ../vars/jenkins_vars.yml
    - "{{ jenkins_home }}/cfn_generated_vars.yml"
  vars: 
    efs_file_system_id: "{{ jenkins_efs }}"
    mount_dir: "{{ jenkins_home }}"
  pre_tasks:
    - include: ./common/gather_instance_facts.yml
    - name: Set mount type based on cloudformation generated vars
      set_fact:
        mount_type: "efs"
      when: jenkins_efs != false

    - name: Get the jenkins password from the parameter store
      command: "aws ssm get-parameters --names JenkinsAdminPassword --with-decryption --region {{ aws_region }} --query \"Parameters[*].Value\" --output text"
      register: jenkins_admin_password_result

    - name: Store the jenkins password as the jenkins_admin_password
      set_fact:
        jenkins_admin_password: "{{ jenkins_admin_password_result.stdout }}"

    - name: Ensure jenkins group exists
      group:
        name: jenkins
        state: present
      become: yes
      when: jenkins_ebs

    - name: Ensure jenkins user exists
      user:
        name: jenkins
        group: jenkins
        shell: /bin/false
        home: "{{ jenkins_home }}"
      become: yes
      when: jenkins_ebs

    - name: Ensure jenkins home exists for EBS
      file:
        path: "{{ jenkins_home }}"
        state: directory
        owner: jenkins
        group: jenkins
        recurse: yes
      become: yes
      when: jenkins_ebs

    - name: Get the sonarqube token from the parameter store
      command: "aws ssm get-parameters --names SonarQubeToken --with-decryption --region {{ aws_region }} --query \"Parameters[*].Value\" --output text"
      register: sonar_token_result
      when: create_sonar

    - name: Store the sonar token
      set_fact:
        sonar_token: "{{ sonar_token_result.stdout }}"
      when: create_sonar

  #  - name: Enable rhui-REGION-rhel-server-extras (for docker)
  #    shell: yum-config-manager --enable rhui-REGION-rhel-server-extras
  #    become: yes
  roles:
    #- { role: '../roles/wrapper/aws_cli', become: yes, become_user: ec2-user }
    #- { role: '../roles/custom/gold_volume', become: yes  }
    - { role: '../roles/third_party/geerlingguy.java', become: yes }
    - { role: '../roles/third_party/geerlingguy.jenkins', become: yes }
    - { role: '../roles/third_party/ansible-role-maven-master', become: yes }
    - { role: '../roles/wrapper/ansible-terraform', become: yes }
    #- { role: '../roles/third_party/ansible-role-docker-master', become: yes }

  handlers:
    - name: restart jenkins
      service: name=jenkins state=restarted enabled=yes

  post_tasks:
    - name: Create devops scripts directory
      file:
        dest: "{{ jenkins_home }}/devops_scripts"
        owner: jenkins
        group: jenkins
        state: directory
        mode: 0750
      become: yes

    - name: Create jobs directory
      file:
        dest: "{{ jenkins_home }}/jobs/{{ item }}"
        owner: jenkins
        group: jenkins
        state: directory
        mode: 0750
      become: yes
      with_items:
        - devops-stack-ansible
        - devops-stack-gi-snapshots
        - devops-stack-new-gi-stack

    - name: Create jenkins jobs
      template:
        src: ../templates/jenkins_jobs/{{ item }}.xml.j2
        dest: "{{ jenkins_home }}/jobs/{{ item }}/config.xml"
        owner: jenkins
        group: jenkins
        mode: 0640
      become: yes
      with_items:
        - devops-stack-ansible
        - devops-stack-gi-snapshots
        - devops-stack-new-gi-stack

    - name: Create devops scripts
      template:
        src: ../templates/devops_scripts/{{ item }}.j2
        dest: "{{ jenkins_home }}/devops_scripts/{{ item }}"
        owner: jenkins
        group: jenkins
        mode: 0755
      become: yes
      with_items:
        - jenkins_gold_snapshot_creation.sh
        - nexus_gold_snapshot_creation.sh
        - sonar_gold_snapshot_creation.sh
        - snapshot_backup.sh

    - name: Create the script to stop the service and take a snapshot
      template:
        src: ../templates/jenkins_gold_snapshot_creation.sh.j2
        dest: "{{ jenkins_home }}/jenkins_gold_snapshot_creation.sh"
        owner: jenkins
        group: jenkins
        mode: 0755
      become: yes

    - name: Wait for Jenkins to start up before proceeding.
      shell: "curl -D - --silent --max-time 5 http://127.0.0.1:8080/cli/"
      register: result
      until: (result.stdout.find("403 Forbidden") != -1) or (result.stdout.find("200 OK") != -1) and (result.stdout.find("Please wait while") == -1)
      retries: "{{ jenkins_connection_retries }}"
      delay: "{{ jenkins_connection_delay }}"
      changed_when: false
      check_mode: no

    - name: Set credentials for Github service account
      uri:
        method: POST
        url: "http://127.0.0.1:8080/credentials/store/system/domain/_/createCredentials"
        user: admin
        password: "{{ jenkins_admin_password }}"
        force_basic_auth: yes
        validate_certs: no
        status_code: 302
        body: |
          json={
            "": "0",
            "credentials": {
              "scope": "GLOBAL",
              "id": "Github Token Credentials",
              "username": "{{ github_un }}",
              "password": "{{ github_token }}",
              "description": "My new credentials",
              "$class": "com.cloudbees.plugins.credentials.impl.UsernamePasswordCredentialsImpl"
            },
          }
      notify: restart jenkins

    - name: Update the Sonar plugin configuration
      template:
        src: ../templates/hudson.plugins.sonar.SonarGlobalConfiguration.xml.j2
        dest: "{{ jenkins_home }}/hudson.plugins.sonar.SonarGlobalConfiguration.xml"
        owner: jenkins
        group: jenkins
        mode: 0640
      become: yes
      when: create_sonar 
      notify: restart jenkins

    - name: Add chmod to init file to ensure proper restart of jenkins on server reboot
      lineinfile:
        path: /etc/init.d/jenkins
        insertafter: '^done'
        line: "chmod 744 /var/log/jenkins"
      become: yes
      notify: restart jenkins

    - name: Copy ec2-user .ssh dir to jenkins .ssh dir
      shell: "cp -R /home/ec2-user/.ssh {{ jenkins_home }};"
      become: yes

    - name: Update permissions on jenkins .ssh
      file:
        dest: "{{ jenkins_home }}/.ssh"
        owner: jenkins
        group: jenkins
        state: directory
        recurse: yes
      become: yes

    - name: Create directory for terraform state files
      file:
        path: "{{ jenkins_home }}/terraform_state_files"
        state: directory
        owner: jenkins
        group: jenkins
        mode: 0700
      become: yes

    - name: Copy hosts file to jenkins home
      shell: "cp /home/ec2-user/devops_hosts {{ jenkins_home }}/devops_hosts"
      become: yes
      when: create_sonar or create_nexus or create_fortify

    - include: ./common/daas-demo-application.yml
      when: create_sonar or create_nexus or create_fortify

    - include: ./common/daas-demo-inspec.yml
      when: create_inspec
